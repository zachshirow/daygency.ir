---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import Link from '@/components/Link.astro'
import PostNavigation from '@/components/PostNavigation.astro'
import TableOfContents from '@/components/TableOfContents.astro'
import { badgeVariants } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Separator } from '@/components/ui/separator'
import Layout from '@/layouts/Layout.astro'
import { parseAuthors } from '@/lib/server-utils'
import { formatDate, readingTime } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import { type CollectionEntry, getCollection, render } from 'astro:content'
import { CardContent, Card } from '@/components/ui/card'
import {numberWithCommas} from "@/lib/utils"
import {components} from "@/mixins/autoImportComponents"



import BlogCard from "@/components/BlogCard.astro"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

import { actions } from 'astro:actions';

export const prerender = true;

export async function getStaticPaths() {
  const services = (await getCollection('services'))
    .filter((service) => !service.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
  return services.map((service) => ({
    params: { id: service.id },
    props: service,
  }))
}

type Props = CollectionEntry<'services'>


const currentServiceId = Astro.params.id
const currentService = Astro.props


---

<Layout
  title={currentService.data.aliases[0]}
  description={currentService.data.description}
  image={currentService.data.image?.src ?? '/static/1200x630.png'}
>
  <section
    class="grid grid-cols-[minmax(0px,1fr)_min(768px,100%)_minmax(0px,1fr)] gap-y-6 *:px-4"
  >
    <Breadcrumbs
      items={[
        { href: '/services', label: 'خدمات', icon: 'lucide:archive' },
        { label: `ثبت درخواست برای خدمت: ${currentService.data.aliases[0]}`, icon: 'lucide:file-text' },
      ]}
      class="col-start-2"
    />

    

        
    <article
      class="prose prose-neutral col-start-2 max-w-none dark:prose-invert"
    >
    
       <Card className="mb-10">
        <CardContent>
            <div class="pt-8">
              <div><h2 id="lead">فرم ثبت درخواست</h2></div>
             
              <form id="request-form" class="flex flex-col gap-y-6">
                
                <Input name="url" type="text" value={Astro.url} className="hidden"/>
                
                <div class="flex flex-col sm:flex-row gap-y-6 gap-x-6 sm:justify-between sm:items-center">
                  <Label className="sm:min-w-36" htmlFor="fullname">نام و نام خانوادگی:</Label>
                  <Input required name="fullname" type="text"/>
                </div>
                <div class="flex flex-col sm:flex-row gap-y-6 gap-x-6 sm:justify-between sm:items-center">
                  <Label className="sm:min-w-36" htmlFor="phone">شماره تماس:</Label>
                  <Input required name="phone" type="phone" />
                </div>

                <Button variant="outline" type="submit" size={"lg"} id="submit">
                  ثبت درخواست
                </Button>

              </form>

            </div>
        </CardContent>
      </Card>

      <div>
        <h2>جزئیات خدمت</h2>

        <BlogCard entry={currentService} />
        
      </div>
    </article>

  </section>

  <Button
    variant="outline"
    size="icon"
    className="group fixed bottom-8 right-8 z-50 hidden"
    id="scroll-to-top"
    title="Scroll to top"
    aria-label="Scroll to top"
  >
    <Icon
      name="lucide:arrow-up"
      class="mx-auto size-4 transition-all group-hover:-translate-y-0.5"
    />
  </Button>

  <script>

    import { actions } from 'astro:actions';


    document.addEventListener('astro:page-load', () => {

      const scrollToTopButton = document.getElementById('scroll-to-top')
      const footer = document.querySelector('footer')

      if (scrollToTopButton && footer) {
        scrollToTopButton.addEventListener('click', () => {
          window.scrollTo({ top: 0, behavior: 'smooth' })
        })

        window.addEventListener('scroll', () => {
          const footerRect = footer.getBoundingClientRect()
          const isFooterVisible = footerRect.top <= window.innerHeight

          scrollToTopButton.classList.toggle(
            'hidden',
            window.scrollY <= 300 || isFooterVisible,
          )
        })
      }
    
      const form = document.querySelector('form');

      form?.addEventListener('submit', async (event) => {
        
      event.preventDefault();

      const formData = new FormData(form);
      const { error } = await actions.serviceRequest(formData);
      if (!error) {
        alert("درخواست شما با موفقیت ثبت شد.")
        form.reset()      
      } else {
        alert("مشکلی پیش آمده است. لطفا بعدا تلاش کنید.")
      }

    })
    
    })

    
    

    

    


    
    
  </script>
</Layout>
